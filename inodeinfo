#!/usr/bin/python

######################################################################
#
# Simple tool to print various stats calculated from your Internode
# usage.
#
# To use this you need to create the file ~/.inoderc; this 
# should contain the section [inode] and username and password 
# definition; e.g:
#
#     [inode]
#     username = myusername@internode.on.net
#     password = XXXXX
#

from __future__ import print_function
import os, re, sys, time, optparse, logging
from xml.etree import ElementTree

# Check if we are running on Python 3 (copied from 'six' module)
if sys.version_info[0] == 3:
    from configparser import ConfigParser
    from urllib.request import HTTPBasicAuthHandler, build_opener, install_opener, urlopen
else:
    from ConfigParser import ConfigParser
    from urllib2 import HTTPBasicAuthHandler, build_opener, install_opener, urlopen


CONFFILE = os.path.expanduser('~/.inoderc')
TOOLURL = "https://customer-webtools-api.internode.on.net/api/v1.5/"


def parseopts():
    oparse = optparse.OptionParser()
    
    oparse.add_option("-v", "--verbose", action="store_true",
                      help="Verbose messages", default=False)
    oparse.add_option("-d", "--debug", action="store_true",
                      help="Enable debug output", default=False)

    opts, rest = oparse.parse_args()

    return opts


def loadconfig():
    config = ConfigParser()    
    if not os.path.exists(CONFFILE):
        print("No config file defined.  See script header for details")
        sys.exit(-1)

    config.read(CONFFILE)
    uname = config.get('inode','username')
    passwd = config.get('inode','password')
    return (uname, passwd)


def mlen(m, y):
    if m == 0: m = 12
    if m == 2:
        if ((y % 100 and not (y % 4)) or not (y % 400)):
            return 29
        else:
            return 28
    else:
        return (31, 0, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)[m-1]


def calcstats(usage):
    nyear, nmonth, nday, nhour, nmin  = time.localtime()[0:5]

    if usage['month'] == nmonth:
        dip = mlen(nmonth-1, nyear)
        daysleft = usage['day'] - nday
        daysdone = dip - usage['day'] + nday
    else:
        dip = mlen(nmonth, nyear)
        daysleft = dip - nday + usage['day']
        daysdone = nday - usage['day']

    perday = usage['max'] / dip
    pcd = float(daysdone) / (daysdone + daysleft) * 100.0
    pcu = usage['used'] / usage['max'] * 100.0
    mleft = usage['max'] - usage['used']
    mopt = usage['max'] / dip * daysdone
    moptdiff = usage['used'] - mopt
    leftquota = mleft / float(daysleft)

    dayopt = mopt + ((perday / (24*60)) * ((nhour*60)+nmin))
    moptdiff = usage['used'] - dayopt
    moptstr = "over"
    if moptdiff < 0:
        moptstr = "under"
        moptdiff = -moptdiff

    stats = {'perday':perday,
             'daysdone':daysdone,
             'daysleft':daysleft,
             'pcd':pcd,
             'pcu':pcu,
             'mleft':mleft,
             'mopt':mopt,
             'moptdiff':moptdiff,
             'leftquota':leftquota,
             'dayopt':dayopt,
             'moptdiff':moptdiff,
             'moptstr':moptstr}
    return stats


def fetchusage(uname, passwd):
    authhandler = HTTPBasicAuthHandler()
    authhandler.add_password(realm="internode-api", uri=TOOLURL, user=uname, passwd=passwd)
    opener = build_opener(authhandler)
    install_opener(opener)

    # Get service#
    logging.info("Fetching service list")
    fd = urlopen(TOOLURL)
    et = ElementTree.parse(fd)
    logging.debug(ElementTree.tostring(et.getroot()))
    svcs = {}
    for e in et.findall(".//service"):
        svcs[e.attrib['type']] = e.text
    logging.info("Got %d services"%len(svcs))
    if len(svcs) <= 0:
        raise Exception("No services found")

    # Get usage
    for svc in svcs.keys():
        logging.info("Fetching usage for %s"%svc)
        fd = urlopen(TOOLURL+"/"+svcs[svc]+"/usage")
        et = ElementTree.parse(fd)
        logging.debug(ElementTree.tostring(et.getroot()))

        # Current version of elementtree doesn't support attributes
        traffics = et.findall(".//traffic")
        for t in traffics:
            if t.attrib['name'] == 'total':
                traffic = t

        # Extract and convert
        ro = [int(i) for i in traffic.attrib['rollover'].split('-')]
        usage = {
            'year':ro[1],
            'month':ro[1],
            'day':ro[2],
            'max':float(traffic.attrib['quota'])/1000000,
            'used':float(traffic.text)/1000000
        }
        logging.debug(usage)

        svcs[svc] = usage

    return svcs


BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE = [i+30 for i in range(8)]
RESET_SEQ = "\033[0m"
COLOR_SEQ = "\033[1;%dm"
BOLD_SEQ = "\033[1m"

def printstats(usage, stats):
    print("Completed %d days of %d, %d left (%.1f%% done)" \
        % (stats['daysdone'], stats['daysdone']+stats['daysleft'], 
           stats['daysleft'], stats['pcd']))
    print("Used %.2f of %sMB (%.1f%%).  Daily quota is %.1fMB." \
        % (usage['used'], usage['max'], stats['pcu'], stats['perday']))
    #print "Optimal would be %.2f." % (mopt)
    print("%.2fMB left for %d days" \
        % (stats['mleft'], stats['daysleft']))
    print("Optimal this minute would be %.0fMB (actual %.0f)." \
        % (stats['dayopt'], usage['used']))
    print("Daily quota for remainder is %.0fMB." \
        % stats['leftquota'])
    if (stats['moptstr'] == 'under'):
        color = COLOR_SEQ % GREEN
    else:
        color = COLOR_SEQ % RED
    print("You are %.2fMB %s%s%s quota." \
        % (stats['moptdiff'], color, stats['moptstr'], RESET_SEQ))


if __name__ == '__main__':
    opts = parseopts()

    if opts.debug:
        logging.root.setLevel(logging.DEBUG)
    elif opts.verbose:
        logging.root.setLevel(logging.INFO)

    (uname, passwd) = loadconfig()

    usages = fetchusage(uname, passwd)
    for u in usages.keys():
        print("======== %s ========" % u)
        printstats(usages[u], calcstats(usages[u]))
